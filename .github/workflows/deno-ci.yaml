name: CI

on:
  push:
    branches: [ main, test ]
    tags: [ v* ]
    paths-ignore:
      - '*.md'
  pull_request: {}

jobs:

  check:
    name: Check w/ ${{ matrix.deno-version }}
    runs-on: ubuntu-latest
    permissions:
      contents: read

    strategy:
      matrix:
        deno-version:
        - v2.0
        - v2.1
        - canary
      fail-fast: false # run each branch to completion

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Use Deno ${{ matrix.deno-version }}
      uses: denoland/setup-deno@v2
      with:
        deno-version: ${{ matrix.deno-version }}

    # "https" cache: code from the Internet
    - name: Cache https://
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/deno/remote/https
          ~/.cache/deno/gen/https
        key: deno-https/v2-${{ github.sha }}
        restore-keys: deno-https/v2-

    - name: Check doci/mod.ts
      run: time deno check doci/mod.ts

    - name: Build example artifacts - colors
      env:
        DOCI_CONFIG_FILE: registry/examples/colors.yaml
      run: |
        time ./doci/mod.ts pipeline build
        time ./doci/mod.ts pipeline export --target alpine | docker load
        time docker run --rm --read-only deno.dir/examples/colors

    - name: Build example artifacts - flags
      env:
        DOCI_CONFIG_FILE: registry/examples/flags.yaml
      run: |
        time ./doci/mod.ts pipeline build
        time ./doci/mod.ts pipeline export --target alpine | docker load
        time docker run --rm --read-only deno.dir/examples/flags --hello=world yup

    - name: Build example artifacts - welcome
      env:
        DOCI_CONFIG_FILE: registry/examples/welcome.yaml
      run: |
        time ./doci/mod.ts pipeline build
        time ./doci/mod.ts pipeline export --target alpine | docker load
        time docker run --rm --read-only deno.dir/examples/welcome

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    name: 'Push container image'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: cloudydeno/doci-cli

    needs: check
    steps:
      - uses: actions/checkout@v4

      - name: Use Deno stable
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.1
      - name: Cache https://
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/deno/remote/https
            ~/.cache/deno/gen/https
          key: deno-doci-https/v2-${{ github.sha }}
          restore-keys: deno-doci-https/v2-
      - name: Install denodir-oci utility
        run: deno install --global --allow-read --allow-write=$HOME,${TMPDIR:-/tmp} --allow-run --allow-net --allow-env doci/mod.ts

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=ref,event=pr
            type=ref,event=tag
            type=edge,branch=main

      - name: Build denodir
        id: build
        run: echo "digest=$(doci pipeline build -o digest)\n" >> $GITHUB_OUTPUT

      - name: hello
        env:
          subjectname: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subjectdigest: ${{ steps.build.outputs.digest }}
        run: |
          echo "$subjectname"
          echo "$subjectdigest"

      - name: Push alpine tags
        env:
          doci_target: alpine
          doci_destinations: ${{ steps.meta.outputs.tags }}
          doci_labels: ${{ steps.meta.outputs.labels }}
        run: doci pipeline push-all

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true
