name: CI

on:
  push:
    branches: [ main ]
    tags: [ v* ]
    paths-ignore:
      - '*.md'
  pull_request: {}

jobs:

  check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    name: Check w/ ${{ matrix.deno-version }}
    strategy:
      matrix:
        deno-version:
        - v2.0
        - v2.1
        - canary
      fail-fast: false # run each branch to completion

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Use Deno ${{ matrix.deno-version }}
      uses: denoland/setup-deno@v2
      with:
        deno-version: ${{ matrix.deno-version }}

    # "https" cache: code from the Internet
    - name: Cache https://
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/deno/remote/https
          ~/.cache/deno/gen/https
        key: deno-https/v2-${{ github.sha }}
        restore-keys: deno-https/v2-

    - name: Check doci/mod.ts
      run: time deno check doci/mod.ts

    - name: Build example artifacts - colors
      env:
        DOCI_CONFIG_FILE: registry/examples/colors.yaml
      run: |
        time ./doci/mod.ts pipeline build
        time ./doci/mod.ts pipeline export --target alpine | docker load
        time docker run --rm --read-only deno.dir/examples/colors

    - name: Build example artifacts - flags
      env:
        DOCI_CONFIG_FILE: registry/examples/flags.yaml
      run: |
        time ./doci/mod.ts pipeline build
        time ./doci/mod.ts pipeline export --target alpine | docker load
        time docker run --rm --read-only deno.dir/examples/flags --hello=world yup

    - name: Build example artifacts - welcome
      env:
        DOCI_CONFIG_FILE: registry/examples/welcome.yaml
      run: |
        time ./doci/mod.ts pipeline build
        time ./doci/mod.ts pipeline export --target alpine | docker load
        time docker run --rm --read-only deno.dir/examples/welcome

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    needs: check
    runs-on: ubuntu-latest
    name: 'Push container image'
    if: github.event_name == 'push'

    steps:
      - name: Use Deno stable
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.1
      - name: Cache https://
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/deno/remote/https
            ~/.cache/deno/gen/https
          key: deno-doci-https/v2-${{ github.sha }}
          restore-keys: deno-doci-https/v2-
      - name: Install denodir-oci utility
        run: deno install --global --allow-read --allow-write=$HOME,${TMPDIR:-/tmp} --allow-run --allow-net --allow-env --reload=https://raw.githubusercontent.com https://raw.githubusercontent.com/cloudydeno/denodir-oci/main/doci/mod.ts

      - name: Determine image name
        id: name
        run: |
          IMAGE_ID=ghcr.io/cloudydeno/doci-cli
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          if [[ "${{ github.ref }}" == "refs/tags/"* ]]
          then VERSION=$( echo $VERSION | sed -e 's/^v//' )
          else VERSION=$( echo ${{ github.sha }} | cut -c1-7 )
          fi
          echo "Will push to $IMAGE_ID:$VERSION"
          echo "::set-output name=image::$IMAGE_ID"
          echo "::set-output name=tag::$VERSION"

      - name: Log into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: x-access-token
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v4

      - name: Build denodir
        run: doci pipeline build
      - name: Push alpine image
        run: doci pipeline push --tag ${{ steps.name.outputs.tag }} --target alpine
